import time
from time import sleep 
import RPi.GPIO as GPIO 
import serial
import string 
import time 
buzzerpin=37 
motorpin=36 
vibpin=11 
seatbeltpin=12 
ledpin=13 
beltvalue=0
GPIO.setmode(GPIO.BOARD)
GPIO.setwarnings(False) 
GPIO.setup(vibpin,GPIO.OUT) 
GPIO.setup(buzzerpin,GPIO.OUT)
GPIO.setup(motorpin,GPIO.OUT) 
GPIO.setup(seatbeltpin,GPIO.IN,pull_up_down=GPIO.PUD_UP) 
GPIO.setup(ledpin,GPIO.OUT)
GPIO.output(buzzerpin,0) 
GPIO.output(motorpin,0) 
GPIO.output(ledpin,1) 
GPIO.output(vibpin,0)
# define two constants, one for the eye aspect ratio to indicate
# blink and then a second constant for the number of consecutive 
# frames the eye must be below the threshold for to set off the
# alarm 
EYE_AR_THRESH = 0.3
EYE_AR_CONSEC_FRAMES = 10
# initialize the frame counter as well as a boolean used to 
# indicate if the alarm is going off
COUNTER = 0
ALARM_ON = False
detector = dlib.get_frontal_face_detector()
predictor = dlib.shape_predictor("/home/pi/drowsiness-detection/shape_predictor_68_face_landmarks.dat") 
(lStart, lEnd) = face_utils.FACIAL_LANDMARKS_IDXS["left_eye"]
(rStart, rEnd) = face_utils.FACIAL_LANDMARKS_IDXS["right_eye"] 
vs = VideoStream(0).start()
time.sleep(1.0) 
GPIO.output(motorpin,1)
# loop over frames from the video stream 
while True:
# grab the frame from the threaded video file stream, resize 
# it, and convert it to grayscale
# channels)
seatbeltpinvalue= GPIO.input(seatbeltpin) 
if seatbeltpinvalue==0:
beltvalue=1 
else:
beltvalue=0 
frame = vs.read()
frame = imutils.resize(frame, width=450)
gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY) 
# detect faces in the grayscale frame
rects = detector(gray, 0)
# loop over the face detections 
for rect in rects:
# determine the facial landmarks for the face region, then
# convert the facial landmark (x, y)-coordinates to a NumPy 
# array
# extract the left and right eye coordinates, then use the
# coordinates to compute the eye aspect ratio for both eyes 
leftEye = shape[lStart:lEnd]
rightEye = shape[rStart:rEnd] 
leftEAR = eye_aspect_ratio(leftEye)
rightEAR = eye_aspect_ratio(rightEye)
# average the eye aspect ratio together for both eyes 
ear = (leftEAR + rightEAR) / 2.0
# compute the convex hull for the left and right eye, then
# visualize each of the eyes 
leftEyeHull = cv2.convexHull(leftEye)
rightEyeHull = cv2.convexHull(rightEye) 
cv2.drawContours(frame, [leftEyeHull], -1, (0, 255, 0), 1)
cv2.drawContours(frame, [rightEyeHull], -1, (0, 255, 0), 1) 
# check to see if the eye aspect ratio is below the blink
# threshold, and if so, increment the blink frame counter 
if ear < EYE_AR_THRESH:
COUNTER += 1
# if the eyes were closed for a sufficient number of 
# then sound the alarm
if COUNTER >= EYE_AR_CONSEC_FRAMES:
# if the alarm is not on, turn it on 
if not ALARM_ON:
ALARM_ON = True
print("//////// DROWSINESS DETECTED ///////") 
GPIO.output(motorpin,0)
GPIO.output(ledpin,0)
GPIO.output(vibpin,1) 
GPIO.output(buzzerpin,1) 
sleep(1) 
GPIO.output(buzzerpin,0)
# draw an alarm on the frame
cv2.putText(frame, "DROWSINESS ALERT!", (10, 30),
cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 0, 255), 2)
# otherwise, the eye aspect ratio is not below the blink 
# threshold, so reset the counter and alarm
else:
COUNTER = 0
ALARM_ON = False 
if beltvalue==0:
GPIO.output(motorpin,1) 
GPIO.output(ledpin,1) 
GPIO.output(vibpin,0)
else:
print("--------- NO SEAT BELT -----------")
GPIO.output(motorpin,0) 
GPIO.output(ledpin,0) 
GPIO.output(vibpin,1) 
GPIO.output(buzzerpin,1) 
sleep(1) 
GPIO.output(buzzerpin,0)
# draw the computed eye aspect ratio on the frame to help 
# with debugging and setting the correct eye aspect ratio 
# thresholds and frame counters
key = cv2.waitKey(1) & 0xFF
# if the `q` key was pressed, break from the loop 
if key == ord("q"):
break
# do a bit of cleanup 
cv2.destroyAllWindows() 
vs.stop()